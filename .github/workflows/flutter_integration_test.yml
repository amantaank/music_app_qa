name: Flutter Integration Tests on iOS

on: [push, pull_request]

jobs:
  build:
    runs-on: macos-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.3.10'

    - name: Cache Pub dependencies
      uses: actions/cache@v2
      with:
        path: |
          ~/.pub-cache
        key: ${{ runner.os }}-pub-${{ hashFiles('**/pubspec.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pub-

    - name: Install dependencies
      run: flutter pub get

    - name: Set up Xcode
      run: |
        sudo xcode-select --switch /Applications/Xcode.app/Contents/Developer
        sudo xcodebuild -license accept
        sudo gem install cocoapods

    - name: Create directories for screenshots and reports
      run: |
        mkdir -p integration_tests/screenshots
        mkdir -p integration_tests/reports
        mkdir -p integration_tests/reports/html

    - name: Build iOS app for testing
      run: flutter build ios --debug --no-codesign

    - name: Start iPhone simulator
      id: boot-sim
      run: |
        export SIMULATOR_UDID=$(xcrun simctl create "iPhone 15" com.apple.CoreSimulator.SimDeviceType.iPhone-15)
        echo "SIMULATOR_UDID=$SIMULATOR_UDID" >> $GITHUB_ENV
        xcrun simctl boot $SIMULATOR_UDID
        xcrun simctl bootstatus $SIMULATOR_UDID
        sleep 30  # Add a delay to ensure the simulator is fully booted

    - name: Install app on simulator
      run: flutter install --device-id ${{ env.SIMULATOR_UDID }}

    - name: Log simulator status
      run: xcrun simctl list

    - name: Run integration tests
      run: |
        for test in integration_tests/tests/*.dart; do
          echo "Running test: $test"
          flutter drive --driver integration_tests/app.dart --target=$test --device-id ${{ env.SIMULATOR_UDID }} > integration_tests/reports/$(basename $test .dart)_results.txt
          if [ -f build/host_integration_test/test_output/junit/test-outputs.json ]; then
            cp build/host_integration_test/test_output/junit/test-outputs.json integration_tests/reports/$(basename $test .dart)_results.json
          else
            echo "No JSON report found for $test"
          fi
        d
